#!/usr/bin/env bash

# Documentation originally from: https://github.com/asdf-vm/asdf/blob/master/docs/plugins-create.md
#
# Must print a string with a space-separated list of versions. Example output would be the following:
#
# 1.0.1 1.0.2 1.3.0 1.4
#
# Note that the newest version should be listed last so it appears closer to the user's prompt.
# This is helpful since the list-all command prints each version on it's own line.
# If there are many versions it's possible the early versions will be off screen.
#
# If versions are being pulled from releases page on a website it's recommended to not
# sort the versions if at all possible. Often the versions are already in the correct order or,
# in reverse order, in which case something like tac should suffice. If you must sort versions manually
# you cannot rely on sort -V since it is not supported on OSX. An alternate sort function like this is a better choice.

set -e
set -o pipefail

github_coordinates="caddyserver/caddy"
releases_path="https://api.github.com/repos/${github_coordinates}/releases"

cmd="curl -s"
if [ -n "$GITHUB_API_TOKEN" ]; then
	cmd="$cmd -H 'Authorization: token $GITHUB_API_TOKEN'"
fi
cmd="$cmd $releases_path"

# stolen from https://github.com/rbenv/ruby-build/pull/631/files#diff-fdcfb8a18714b33b07529b7d02b54f1dR942
function sort_versions() {
	sed 'h; s/[+-]/./g; s/.p\([[:digit:]]\)/.z\1/; s/$/.z/; G; s/\n/ /' |
		LC_ALL=C sort -t. -k 1,1 -k 2,2n -k 3,3n -k 4,4n -k 5,5n | awk '{print substr($2,2);}'
}

# Fetch all tag names, and get only second column.
# Then remove all unnecesary characters.
versions=$(
	eval "$cmd" |
		tee |
		grep -oE "tag_name\": *\".{1,30}\"," |
		sed 's/tag_name\": *\"//;s/\",//' |
		sort_versions |
		tr '\n' ' '
)

echo "$versions"
